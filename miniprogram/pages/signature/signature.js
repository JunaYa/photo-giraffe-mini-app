"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bezier_1 = require("../../lib/bezier");
const point_1 = require("../../lib/point");
const throttle_1 = require("../../lib/throttle");
let ctx = null;
let isTouching = false;
let _isEmpty = false;
let minDistance = 5;
let backgroundColor = '#4f736d';
let pen = { color: '#333333', width: 1, _maxWidth: 10 };
let dpr = 1;
let _maxWidth = 2.5;
let _minWidth = 0.5;
let _dotSize = (_minWidth + _maxWidth) / 2;
let _lastPoints = [];
let velocityFilterWeight = 0.7;
let _lastVelocity = 0;
let _lastWidth = (_minWidth + _maxWidth) / 2;
let _strokeMoveUpdate = null;
let timeLine = [];
Page({
    data: {},
    onLoad: function (options) {
        console.log('onLoad', options);
    },
    onReady: function () {
        this.initContext();
        _strokeMoveUpdate = throttle_1.throttle(this._strokeUpdate, 16);
    },
    onShow: function () {
    },
    onHide: function () {
    },
    onUnload: function () {
    },
    initContext() {
        const { pixelRatio, windowWidth, windowHeight } = wx.getSystemInfoSync();
        dpr = pixelRatio;
        console.log('pixelRatio', pixelRatio);
        const query = wx.createSelectorQuery();
        query.select('#canvas').node().exec((res) => {
            const canvas = res[0].node;
            console.log('canvas --- ', canvas);
            canvas.width = windowWidth;
            canvas.height = windowHeight;
            ctx = canvas.getContext('2d');
            console.log('ctx', ctx);
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        });
    },
    onTouchStart(event) {
        console.log('touch start -- ', event);
        isTouching = true;
        this._strokeBegin(event);
    },
    onTouchMove(event) {
        _strokeMoveUpdate(event);
    },
    onTouchEnd(event) {
        console.log('touch end --', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onTouchCancel(event) {
        console.log('touch cancel', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    onError(event) {
        console.log('canvas error', event);
        isTouching = false;
        this._strokeEnd(event);
    },
    _strokeBegin(event) {
        console.log('_strokeBegin ++++++++');
        const newPointGroup = {
            color: pen.color,
            points: [],
        };
        timeLine.push(newPointGroup);
        this._reset();
        _strokeMoveUpdate(event);
    },
    _strokeUpdate(event) {
        if (timeLine.length === 0) {
            this._strokeBegin(event);
            return;
        }
        const { x, y } = event.changedTouches[0];
        const point = this._createPoint(x, y);
        const lastPointGroup = timeLine[timeLine.length - 1];
        const lastPoints = lastPointGroup.points;
        const lastPoint = lastPoints.length > 0 && lastPoints[lastPoints.length - 1];
        const isLastPointTooClose = lastPoint ? point.distanceTo(lastPoint) <= minDistance : false;
        pen.color = lastPointGroup.color;
        if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
            const curve = this._addPoint(point);
            if (!lastPoints) {
                this._drawDot(point);
            }
            else if (curve) {
                this._drawCurve(curve);
            }
        }
    },
    _strokeEnd(event) {
        console.log('end +++++++ ', event);
        _strokeMoveUpdate(event);
    },
    _calculateCurveWidths(startPoint, endPoint) {
        const velocity = velocityFilterWeight * endPoint.velocityFrom(startPoint) + (1 - velocityFilterWeight) * _lastVelocity;
        const newWidth = this._strokeWidth(velocity);
        const widths = {
            start: _lastWidth,
            end: newWidth,
        };
        _lastVelocity = velocity;
        _lastWidth = newWidth;
        return widths;
    },
    _strokeWidth(velocity) {
        return Math.max(_maxWidth / (velocity + 1), _minWidth);
    },
    _createPoint(x, y) {
        const left = 0;
        const top = 0;
        return new point_1.Point(x - left, y - top, new Date().getTime());
    },
    _addPoint(point) {
        if (timeLine.length > 1) {
            console.log('---------- timeLine ------');
            timeLine[timeLine.length - 1].points.push(point);
        }
        _lastPoints.push(point);
        if (_lastPoints.length > 2) {
            if (_lastPoints.length === 3) {
                _lastPoints.unshift(_lastPoints[0]);
            }
            const widths = this._calculateCurveWidths(_lastPoints[1], _lastPoints[2]);
            const curve = bezier_1.Bezier.fromPoints(_lastPoints, widths);
            _lastPoints.shift();
            return curve;
        }
        return null;
    },
    _drawDot(point) {
        ctx.beginPath();
        const width = _dotSize;
        this._drawCurveSegment(point.x, point.y, width);
        ctx.closePath();
        ctx.fillStyle = pen.color;
        ctx.fill();
    },
    _drawCurveSegment(x, y, width) {
        ctx.moveTo(x, y);
        ctx.arc(x, y, width, 0, 2 * Math.PI, false);
        _isEmpty = false;
    },
    _drawCurve(curve) {
        console.log('_drawCurve ---- ', curve);
        const widthDelta = curve.endWidth - curve.startWidth;
        const drawSteps = Math.floor(curve.length()) * 2;
        ctx.beginPath();
        ctx.fillStyle = pen.color;
        for (let i = 0; i < drawSteps; i += 1) {
            const t = i / drawSteps;
            const tt = t * t;
            const ttt = tt * t;
            const u = 1 - t;
            const uu = u * u;
            const uuu = uu * u;
            let x = uuu * curve.startPoint.x;
            x += 3 * uu * t * curve.control1.x;
            x += 3 * u * tt * curve.control2.x;
            x += ttt * curve.endPoint.x;
            let y = uuu * curve.startPoint.y;
            y += 3 * uu * t * curve.control1.y;
            y += 3 * u * tt * curve.control2.y;
            y += ttt * curve.endPoint.y;
            const width = Math.min(curve.startWidth + ttt * widthDelta, pen._maxWidth);
            this._drawCurveSegment(x, y, width);
        }
        ctx.closePath();
        ctx.fill();
    },
    _lineTo(x, y) {
        ctx.lineTo(x * dpr, y * dpr);
    },
    _moveTo(x, y) {
        ctx.moveTo(x * dpr, y * dpr);
    },
    _reset() {
        _lastPoints = [];
        _lastVelocity = 0;
        _lastWidth = (_minWidth + _maxWidth) / 2;
        ctx.fillStyle = pen.color;
    },
    _clear() {
        ctx.fillStyle = backgroundColor;
        ctx.clearRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        ctx.fillRect(16, 16, ctx.canvas.width - 32, ctx.canvas.height - 32);
        timeLine = [];
        this._reset();
        _isEmpty = true;
        console.log(_isEmpty);
        console.log(isTouching);
    },
});
//# sourceMappingURL=data:application/json;base64,